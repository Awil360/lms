pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'awil360'
        BACKEND_IMAGE = "${DOCKER_REGISTRY}/lms-backend"
        DOCKER_CREDENTIALS_ID = 'lms-docker'
        POSTGRES_CONTAINER_NAME = 'lms-database'
        POSTGRES_PASSWORD = 'awil123456'
        POSTGRES_IMAGE = 'postgres'
    }

    stages {
        stage('Start PostgreSQL Container') {
            steps {
                script {
                    // Run PostgreSQL container
                    sh """
                        docker run -dt --name ${env.POSTGRES_CONTAINER_NAME} \
                        -e POSTGRES_PASSWORD=${env.POSTGRES_PASSWORD} \
                        ${env.POSTGRES_IMAGE}
                    """

                    // Get the IP address of the PostgreSQL container
                    def dbIp = sh(script: "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${env.POSTGRES_CONTAINER_NAME}", returnStdout: true).trim()
                    // Set the DATABASE_URL environment variable
                    env.DATABASE_URL = "postgresql://postgres:${env.POSTGRES_PASSWORD}@${dbIp}:5432/postgres"
                }
            }
        }

        stage('Checkout') {
            steps {
                // Checkout the source code
                checkout scm
            }
        }

        stage('Read Version') {
            steps {
                script {
                    def packageJson = readFile('webapp/package.json')
                    def json = readJSON text: packageJson
                    env.VERSION = json.version
                    env.BACKEND_IMAGE_TAG = "${env.BACKEND_IMAGE}:${env.VERSION}"
                }
            }
        }

        stage('Build Backend Docker Image') {
            steps {
                script {
                    // Ensure the DATABASE_URL is available during the build
                    withEnv(["DATABASE_URL=${env.DATABASE_URL}"]) {
                        writeFile file: 'api/.env', text: "DATABASE_URL=${env.DATABASE_URL}"
                        docker.build(env.BACKEND_IMAGE_TAG, 'api')
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up PostgreSQL container
            script {
                sh "docker stop ${env.POSTGRES_CONTAINER_NAME} || true"
                sh "docker rm ${env.POSTGRES_CONTAINER_NAME} || true"
            }
        }
    }
}
